Backup and Recovery

Standard backup best practices apply when creating your OpenStack backup policy.
 For example, how often to backup your data is closely related to how quickly you need to recover from data loss.

If you cannot have any data loss at all, you should focus on High Availability as well as backups.

Other backup considerations include:
• How many backups to keep?
• Should backups be kept off-site?
• How often should backups be tested?

Just as important as a backup policy is a recovery policy (or at least recovery testing).

What to Backup
While OpenStack is composed of many components and moving parts, backing up the critical data is quite simple.

This chapter describes only how to back up configuration files and databases that the various OpenStack components need to run.
 This chapter does not describe how to back up objects inside Object Storage or data contained inside Block Storage.
 Generally these areas are left for the user to back up on their own.

Database Backups
The example OpenStack architecture designates the Cloud Controller as the MySQL server.
 This MySQL server hosts the databases for Nova, Glance, Cinder, and Keystone.
 With all of these databases in one place, it’s very easy to create a database backup:
<br /><code>
# mysqldump --opt --all-databases &gt;<br />
 &nbsp; &nbsp; &nbsp; &nbsp; openstack.sql<br />
</code>

If you only want to backup a single database, you can instead run:
<br /><code>
# mysqldump --opt nova &gt; nova.sql<br />
</code>
where novais the database you want to back up.

You can easily automate this process by creating a cron job that runs the following script once per day:
<br /><code>
#!/bin/bash<br />
backup_dir=&quot;/var/lib/backups/mysql&quot;<br />
filename=&quot;${backup_dir}/mysql-`hostname`-`eval date +%Y%m%d`.sql.gz&quot;<br />
# Dump the entire MySQL database<br />
/usr/bin/mysqldump --opt --all-databases | gzip &gt; $filename <br />
# Delete backups older than 7 days<br />
find $backup_dir -ctime +7 -type f -delete<br />
</code>

This script dumps the entire MySQL database and delete any backups older than 7 days.

File System Backups
This section discusses which files and directories should be backed up regularly, organized by service.

Compute
The <code>/etc/nova</code> directory on both the cloud controller and compute nodes should be regularly backed up.

<code>/var/log/nova</code> does not need backed up if you have all logs going to a central area.
 It is highly recommended to use a central logging server or backup the log directory.

<code>/var/lib/nova</code> is another important directory to backup.
 The exception to this is the <code>/var/lib/nova/instances</code> subdirectory on compute nodes.
 This subdirectory contains the KVM images of running instances.
 You would only want to back up this directory if you need to maintain backup copies of all instances.
 Under most circumstances, you do not need to do this, but this can vary from cloud to cloud and your service levels.
 Also be aware that making a backup of a live KVM instance can cause that instance to not boot properly if it is ever restored from a backup.

Image Catalog and Delivery
<code>/etc/glance</code> and <code>/var/log/glance</code> follow the same rules at the nova counterparts.

<code>/var/lib/glance</code> should also be backed up.
 Take special notice of <code>/var/lib/glance/</code> images.
 If you are using a file-based back-end of Glance, <code>/var/lib/glance/images</code> is where the images are stored and care should be taken.

There are two ways to ensure stability with this directory.
 The first is to make sure this directory is run on a RAID array. If a disk fails, the directory is available.
 The second way is to use a tool such as rsync to replicate the images to another server:
<br /><code>
# rsync -az --progress /var/lib/glance/images backup-server:/var/lib/glance/images/<br />
</code>

Identity
<code>/etc/keystone</code> and <code>/var/log/keystone</code> follow the same rules as other components.

<code>/var/lib/keystone</code>, while should not contain any data being used, can also be backed up just in case.

Block Storage
<code>/etc/cinderand /var/log/cinder</code> follow the same rules as other components.

<code>/var/lib/cinder</code> should also be backed up.

Object Storage
<code>/etc/swiftis</code> very important to have backed up. 
 This directory contains the Swift configuration files as well as the ring files and ring <span class="red-heading">builder files</span>, which if lost render the data on your cluster inaccessible.
 A best practice is to copy the builder files to all storage nodes along with the ring files.
 Multiple backups copies are spread throughout your storage cluster.

Recovering Backups
Recovering backups is a fairly simple process.
 To begin, first ensure that the service you are recovering is not running.
 For example, to do a full recovery of nova on the cloud controller, first stop all novaservices:
<br /><code>
# stop nova-api
 &nbsp; # stop nova-cert
 &nbsp; # stop nova-consoleauth
 &nbsp; # stop nova-novncproxy
 &nbsp; # stop nova-objectstore
 &nbsp; # stop nova-scheduler<br />
</code>

Once that’s done, stop MySQL:
<br /><code>
# stop mysql<br />
</code>

Now you can import a previously backed up database:
<br /><code>
# mysql nova &lt; nova.sql<br />
</code>

As well as restore backed up nova directories:
<br /><code>
# mv /etc/nova{,.orig}<br />
# cp -a /path/to/backup/nova /etc/<br />
</code>

Once the files are restored, start everything back up:
<br /><code>
# start mysql <br />
 &nbsp; &nbsp; &nbsp; # for i in nova-api nova-cert nova-consoleauth nova-novncproxy novaobjectstore nova-scheduler <br />
 &nbsp; &nbsp; &gt; do<br />
 &nbsp; &nbsp; &gt; start $i<br />
 &nbsp; &nbsp; &gt; done<br />
</code>

Other services follow the same process, with their respective directories and databases.
