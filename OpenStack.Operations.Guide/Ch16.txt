Upstream OpenStack

OpenStack is founded on a thriving community which is a source of help, and wel?
comes your contributions. This section details some of the ways you can interact with
the others involved.
Getting Help
There are several avenues available for seeking assistance. The quickest way to is to
help the community help you. Search the Q&amp;A sites, mailing list archives, and bug
lists for issues similar to yours. If you can’t find anything, follow the directions for
Reporting Bugs in the section below or use one of the channels for support below.
Your first port of call should be the official OpenStack documentation, found on
http://docs.openstack.org.
You can get questions answered on the ask.openstack.org site.
Mailing Lists(https://wiki.openstack.org/wiki/Mailing_Lists) are also a great place to
get help. The wiki page has more information about the various lists. As an operator,
the main lists you should be aware of are:
• General list:  openstack@lists.openstack.org. The scope of this list is the cur?
rent state of OpenStack. This is a very high traffic mailing list, with many, many
emails per day.
• Operators list:  openstack-operators@lists.openstack.org.  This list is intend?
ed for discussion among existing OpenStack cloud operators, such as yourself.
Currently, this list is relatively low traffic, on the order of one email a day.
171
• Development list: openstack-dev@lists.openstack.org. The scope of this list is
the future state of OpenStack. This is a high traffic mailing list, with multiple
emails per day.
We recommend you subscribe to the general list and the operator list, although you
must set up filters to manage the volume for the general list. You’ll also find links to
the mailing list archives on the mailing list wiki page where you can search through
the discussions.
Multiple IRC channels(https://wiki.openstack.org/wiki/IRC) are available for general
questions and developer discussions. The general discussion channel is  #openstack
on irc.freenode.net.
Reporting Bugs
As an operator, you are in a very good position to report unexpected behavior with
your cloud. As OpenStack is flexible, you may be the only individual to report a par?
ticular issue. Every issue is important to fix so it is essential to learn how to easily sub?
mit a bug report.
All OpenStack projects use  Launchpadfor bug tracking. You’ll need to create an ac?
count on Launchpad before you can submit a bug report.
Once you have a Launchpad account, reporting a bug is as simple as identifying the
project, or projects that are causing the issue. Sometimes this is more difficult than
expected, but those working on the bug triage are happy to help relocate issues if their
not in the right place initially.
• Report a bug in Nova(https://bugs.launchpad.net/nova/+filebug)
• Report a bug in  python-novaclient(https://bugs.launchpad.net/pythonnovaclient/+filebug)
• Report a bug in Swift(https://bugs.launchpad.net/swift/+filebug)
• Report a bug in  python-swiftclient  (https://bugs.launchpad.net/pythonswiftclient/+filebug)
• Report a bug in Glance(https://bugs.launchpad.net/glance/+filebug)
• Report a bug in  python-glanceclient  (https://bugs.launchpad.net/pythonglanceclient/+filebug)
• Report a bug in Keystone(https://bugs.launchpad.net/keystone/+filebug)
• Report a bug in  python-keystoneclient  (https://bugs.launchpad.net/pythonkeystoneclient/+filebug)
• Report a bug in Quantum(https://bugs.launchpad.net/quantum/+filebug)
172  |  Chapter 16: Upstream OpenStack
• Report a bug in  python-quantumclient  (https://bugs.launchpad.net/pythonquantumclient/+filebug)
• Report a bug in Cinder(https://bugs.launchpad.net/cinder/+filebug)
• Report a bug in  python-cinderclient  (https://bugs.launchpad.net/pythoncinderclient/+filebug)
• Report a bug in Horizon(https://bugs.launchpad.net/horizon/+filebug)
• Report a bug with the  documentation(http://bugs.launchpad.net/openstackmanuals/+filebug)
• Report a bug with the API documentation(http://bugs.launchpad.net/openstackapi-site/+filebug)
To write a good bug report, the following process is essential. First, search for the bug
to make sure there is no bug already filed for the same issue. If you find one, be sure
to click on &quot;This bug affects X people. Does this bug affect you?&quot; If you can’t find the
issue then enter the details of your report. It should at least include:
• The release, or milestone, or commit ID corresponding to the software that you
are running.
• The operating system and version where you’ve identified the bug.
• Steps to reproduce the bug, including what went wrong.
• Description of the expected results instead of what you saw.
• Read and understood your log files so you only include relevant excerpts.
When you do this, the bug is created with:
• Status: New
In the bug comments, you can contribute instructions on how to fix a given bug, and
set it to  Triaged. Or you can directly fix it: assign the bug to yourself, set it to  In pro?
gress, branch the code, implement the fix, and propose your change for merging into
trunk. But let’s not get ahead of ourselves, there are bug triaging tasks as well.
Confirming &amp; Prioritizing
This stage is about checking that a bug is real and assessing its impact. Some of these
steps require bug supervisor rights (usually limited to core teams). If the bug lacks
information to properly reproduce or assess the importance of the bug, the bug is set
to:
• Status: Incomplete
Reporting Bugs  |  173
Once you have reproduced the issue (or are 100% confident that this is indeed a valid
bug) and have permissions to do so, set:
• Status: Confirmed
Core developers also prioritize the bug, based on its impact:
• Importance: &lt;Bug impact&gt;
The bug impacts are categorized as follows:
1. Criticalif the bug prevents a key feature from working properly (regression) for
all users (or without a simple workaround) or result in data loss
2. Highif the bug prevents a key feature from working properly for some users (or
with a workaround)
3. Mediumif the bug prevents a secondary feature from working properly
4. Lowif the bug is mostly cosmetic
5. Wishlistif the bug is not really a bug, but rather a welcome change in behavior
If the bug contains the solution, or a patch, set the bug status to Triaged
Bug Fixing
At this stage, a developer works on a fix. During that time, to avoid duplicating the
work, they should set:
• Status: In progress
• Assignee: &lt;yourself&gt;
When the fix is ready, they propose and get the change reviewed.
After the Change is Accepted
After the change is reviewed, accepted, and lands in master, it automatically moves to:
• Status: Fix committed
When the fix makes it into a milestone or release branch, it automatically moves to:
• Milestone: Milestone the bug was fixed in
• Status: Fix released
174  |  Chapter 16: Upstream OpenStack
Join the OpenStack Community
Since you’ve made it this far in the book, you should consider becoming an official
individual member of the community and  Join The OpenStack Foundation  (https://
www.openstack.org/join/). The OpenStack Foundation is an independent body pro?
viding shared resources to help achieve the OpenStack mission by protecting, em?
powering, and promoting OpenStack software and the community around it, includ?
ing users, developers and the entire ecosystem. We all share the responsibility to
make this community the best it can possibly be and signing up to be a member is the
first step to participating. Like the software, individual membership within the Open?
Stack Foundation is free and accessible to anyone.
Features and the Development Roadmap
OpenStack follows a six month release cycle, typically releasing in April and October
each year. At the start of each cycle, the community gathers in a single location for a
Design Summit. At the summit, the features for the coming releases are discussed,
prioritized and planned. Here’s an example release cycle with dates showing mile?
stone releases, code freeze, and string freeze dates along with an example of when the
Summit occurs. Milestones are interim releases within the cycle that are available as
packages for download and testing. Code freeze is putting a stop to adding new fea?
tures to the release. String freeze is putting a stop to changing any strings within the
source code.
Feature requests typically start their life in Etherpad, a collaborative editing tool,
which is used to take coordinating notes at a design summit session specific to the
feature. This then leads to the creation of a blueprint on the Launchpad site for the
particular project, which is used to describe the feature more formally. Blueprints are
then approved by project team members, and development can begin.
Therefore, the fastest way to get your feature request up for consideration is to create
an Etherpad with your ideas and propose a session to the design summit. If the de?
sign summit has already passed, you may also create a blueprint directly. Read this
blog post about how to work with blueprints(http://vmartinezdelacruz.com/how-toJoin the OpenStack Community  |  175
work-with-blueprints-without-losing-your-mind/) for a developer intern’s perspec?
tive, Victoria Martinez.
The roadmap for the next release as it is developed can be seen at  Releases  (http://
status.openstack.org/release/).
To determine the potential features going in to future releases, or to look at features
implemented previously, take a look at the existing blueprints such as  OpenStack
Compute (nova) Blueprints  (https://blueprints.launchpad.net/nova),  OpenStack
Identity (keystone) Blueprints(https://blueprints.launchpad.net/keystone) and re?
lease notes.
Release notes are maintained on the OpenStack wiki:
Series Status Releases Date
Grizzly Under development, Release schedule Due Apr 4, 2013
Folsom Current stable release, security-supported 2012.2 Sep 27, 2012
2012.2.1 Nov 29, 2012
2012.2.2 Dec 13, 2012
2012.2.3 Jan 31, 2012
Essex Community-supported, security-supported 2012.1 Apr 5, 2012
2012.1.1 Jun 22, 2012
2012.1.2 Aug 10, 2012
2012.1.3 Oct 12, 2012
Diablo Community-supported 2011.3 Sep 22, 2011
2011.3.1 Jan 19, 2012
Cactus Deprecated 2011.2 Apr 15, 2011
Bexar Deprecated 2011.1 Feb 3, 2011
Austin Deprecated 2010.1 Oct 21, 2010
176  |  Chapter 16: Upstream OpenStack
How to Contribute to the Documentation
OpenStack documentation efforts encompass operator and administrator docs, API
docs, and user docs.
The genesis of this book was an in-person event, but now that the book is in your
hands we want you to contribute to it. OpenStack documentation follows the coding
principles of iterative work, with bug logging, investigating, and fixing.
Just like the code, the  docs.openstack.orgsite is updated constantly using the Gerrit
review system, with source stored in GitHub in the  openstack-manuals(http://
github.com/openstack/openstack-manuals/) repository and the  api-site(http://
github.com/openstack/api-site/) repository, in DocBook format.
To review the documentation before it’s published, go to the OpenStack Gerrit server
at  review.openstack.organd search for  project:openstack/openstack-manuals  or
project:openstack/api-site.
See the  How To Contribute(https://wiki.openstack.org/wiki/How_To_Contribute)
page on the wiki for more information on the steps you need to take to submit your
first documentation review or change.
Security Information
As a community, we take security very seriously and follow a specific process for re?
porting potential issues. We vigilantly pursue fixes and regularly eliminate exposures.
You can report security issues you discover through this specific process. The Open?
Stack Vulnerability Management Team is a very small group of experts in vulnerabili?
ty management drawn from the OpenStack community. Their job is facilitating the
reporting of vulnerabilities, coordinating security fixes and handling progressive dis?
closure of the vulnerability information. Specifically, the Team is responsible for the
following functions:
• Vulnerability Management: All vulnerabilities discovered by community mem?
bers (or users) can be reported to the Team.
• Vulnerability Tracking: The Team will curate a set of vulnerability related issues
in the issue tracker. Some of these issues are private to the Team and the affected
product leads, but once remediation is in place, all vulnerabilities are public.
• Responsible Disclosure: As part of our commitment to work with the security
community, the team ensures that proper credit is given to security researchers
who responsibly report issues in OpenStack.
We provide two ways to report issues to the OpenStack Vulnerability Management
Team depending on how sensitive the issue is:
How to Contribute to the Documentation  |  177
• Open a bug in Launchpad and mark it as a ’security bug’. This makes the bug pri?
vate and accessible to only the Vulnerability Management Team.
• If the issue is extremely sensitive, send an encrypted email to one of the Team’s
members. Find their GPG keys at  OpenStack Security  (http://www.open?
stack.org/projects/openstack-security/).
You can find the full list of security-oriented teams you can join at  Security
Teams(http://wiki.openstack.org/SecurityTeams). The Vulnerability Management
process is fully documented at  Vulnerability Management(https://wiki.open?
stack.org/wiki/VulnerabilityManagement).
Finding Additional Information
In addition to this book, there are many other sources of information about Open?
Stack. The  OpenStack website(http://www.openstack.org) is a good starting point,
with  OpenStack Docs(http://docs.openstack.org) and  OpenStack API Docs(http://
api.openstack.org) providing technical documentation about OpenStack. The  Open?
Stack wikicontains a lot of general information that cuts across the OpenStack
projects including a list of  recommended tools  (https://wiki.openstack.org/wiki/
OperationsTools ). Finally, there are a number of blogs aggregated at  Planet Open?
Stack(http://planet.openstack.org).
